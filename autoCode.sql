CREATE DATABASE  IF NOT EXISTS `auto_code` /*!40100 DEFAULT CHARACTER SET utf8 */;
USE `auto_code`;
-- MySQL dump 10.13  Distrib 5.7.9, for Win64 (x86_64)
--
-- Host: localhost    Database: auto_code
-- ------------------------------------------------------
-- Server version	5.7.11-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `back_user`
--

DROP TABLE IF EXISTS `back_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `back_user` (
  `username` varchar(20) NOT NULL COMMENT '用户名',
  `password` varchar(50) NOT NULL COMMENT '密码',
  `add_time` datetime NOT NULL COMMENT '添加时间',
  PRIMARY KEY (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `back_user`
--

LOCK TABLES `back_user` WRITE;
/*!40000 ALTER TABLE `back_user` DISABLE KEYS */;
INSERT INTO `back_user` VALUES ('admin','admin','2014-06-24 10:12:49');
/*!40000 ALTER TABLE `back_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `datasource_config`
--

DROP TABLE IF EXISTS `datasource_config`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `datasource_config` (
  `dc_id` int(11) NOT NULL AUTO_INCREMENT,
  `driver_class` varchar(50) DEFAULT NULL COMMENT '数据库驱动',
  `db_name` varchar(50) DEFAULT NULL,
  `ip` varchar(50) DEFAULT NULL,
  `port` int(11) DEFAULT NULL,
  `username` varchar(50) DEFAULT NULL,
  `password` varchar(50) DEFAULT NULL,
  `back_user` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`dc_id`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `datasource_config`
--

LOCK TABLES `datasource_config` WRITE;
/*!40000 ALTER TABLE `datasource_config` DISABLE KEYS */;
INSERT INTO `datasource_config` VALUES (13,'com.mysql.jdbc.Driver','cmsp_customer','localhost',3306,'longshare','longshare','admin');
/*!40000 ALTER TABLE `datasource_config` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `template_config`
--

DROP TABLE IF EXISTS `template_config`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `template_config` (
  `tc_id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) DEFAULT NULL,
  `save_path` varchar(100) DEFAULT NULL,
  `suffix` varchar(20) DEFAULT NULL,
  `file_name` varchar(50) DEFAULT NULL,
  `content` text,
  `back_user` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`tc_id`),
  KEY `f_backuser` (`back_user`)
) ENGINE=InnoDB AUTO_INCREMENT=50 DEFAULT CHARSET=utf8 COMMENT='模板表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `template_config`
--

LOCK TABLES `template_config` WRITE;
/*!40000 ALTER TABLE `template_config` DISABLE KEYS */;
INSERT INTO `template_config` VALUES (39,'cmsp_Mybatis','orm/mapper',NULL,'${context.javaBeanName}Mapper.xml','#set($jq=\"$\")\n        <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"${context.packageName}.orm.mapper.${context.javaBeanName}Mapper\">\n    <sql id=\"includeColumns\">\n        <trim suffixOverrides=\",\">\n            #foreach($column in $columns)\n            ${column.columnName} as ${column.javaFieldName},\n            #end\n        </trim>\n\n    </sql>\n    <sql id=\"dynamicWhere\">\n        <where>\n            1 = 1\n            #foreach($column in $columns)\n            #if(${column.columnName} == \"modified_time\"||${column.columnName} == \"created_time\")\n            <if test=\"${column.javaFieldName}Start != null\">\n                and ${column.columnName} <![CDATA[ >= ]]> #{${column.javaFieldName}Start,jdbcType=${column.mybatisJdbcType}}\n            </if>\n            <if test=\"${column.javaFieldName}End != null\">\n                and ${column.columnName} <![CDATA[ <= ]]> #{${column.javaFieldName}End,jdbcType=${column.mybatisJdbcType}}\n            </if>\n            #elseif(${column.mybatisJdbcType}==\"TIMESTAMP\"||${column.mybatisJdbcType}==\"DATETIME\")\n            <if test=\"${column.javaFieldName} != null\">\n                and ${column.columnName} = #{${column.javaFieldName},jdbcType=${column.mybatisJdbcType}},\n            </if>\n            #else\n            <if test=\"${column.javaFieldName} != null and ${column.javaFieldName} != \'\'\">\n                and ${column.columnName} = #{${column.javaFieldName},jdbcType=${column.mybatisJdbcType}}\n            </if>\n            #end\n            #end\n        </where>\n    </sql>\n\n    <select id=\"queryByPage\" parameterType=\"${context.packageName}.orm.param.${context.javaBeanName}QueryBean\"\n            resultType=\"${context.packageName}.orm.entity.${context.javaBeanName}Entity\">\n        select\n        <include refid=\"includeColumns\"/>\n\n        from ${table.tableName}\n        <include refid=\"dynamicWhere\"/>\n        <if test=\"orderByStr != null and \'\' != orderByStr\">\n            <bind name=\"orderByStr\" value=\"orderByStr.replaceAll(\'\\\\+\',\' ASC\').replaceAll(\'-\',\' DESC\')\"/>\n            order by ${orderByStr}\n        </if>\n    </select>\n\n    <select id=\"query\" parameterType=\"${context.packageName}.orm.param.${context.javaBeanName}QueryBean\"\n            resultType=\"${context.packageName}.orm.entity.${context.javaBeanName}Entity\">\n        select\n        <include refid=\"includeColumns\"/>\n        from ${table.tableName}\n        <include refid=\"dynamicWhere\"/>\n        <if test=\"orderByStr != null and \'\' != orderByStr\">\n            <bind name=\"orderByStr\" value=\"orderByStr.replaceAll(\'\\\\+\',\' ASC\').replaceAll(\'-\',\' DESC\')\"/>\n            order by ${orderByStr}\n        </if>\n    </select>\n\n    <select id=\"queryById\" parameterType=\"java.lang.String\"\n            resultType=\"${context.packageName}.orm.entity.${context.javaBeanName}Entity\">\n        select\n        <include refid=\"includeColumns\"/>\n        from ${table.tableName}\n        where\n        ${context.pkName} = #{${context.javaPkName},jdbcType=${context.mybatisPkType}}\n    </select>\n\n    <update id=\"update\" parameterType=\"${context.packageName}.orm.entity.${context.javaBeanName}Entity\">\n        update ${table.tableName}\n        <trim prefix=\"set\" suffixOverrides=\",\">\n            #foreach($column in $columns)\n            #if(${column.columnName} == \"modified_time\")\n            ${column.columnName} = now(),\n            #elseif(${column.mybatisJdbcType}==\"TIMESTAMP\"||${column.mybatisJdbcType}==\"DATETIME\")\n            <if test=\"${column.javaFieldName} != null\">\n                ${column.columnName} = #{${column.javaFieldName},jdbcType=${column.mybatisJdbcType}},\n            </if>\n            #else\n            <if test=\"${column.javaFieldName} != null and ${column.javaFieldName} != \'\'\">\n                ${column.columnName} = #{${column.javaFieldName},jdbcType=${column.mybatisJdbcType}},\n            </if>\n            #end\n            #end\n        </trim>\n        <where>\n            ${context.pkName} = #{${context.javaPkName},jdbcType=${context.mybatisPkType}}\n        </where>\n    </update>\n\n    <insert id=\"insert\" parameterType=\"${context.packageName}.orm.entity.${context.javaBeanName}Entity\">\n        insert into ${table.tableName}\n        <trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\">\n            #foreach($column in $columns)\n            ${column.columnName},\n            #end\n        </trim>\n        <trim prefix=\"values (\" suffix=\")\" suffixOverrides=\",\">\n            #foreach($column in $columns)\n            #if(${column.columnName} == \"modified_time\"||${column.columnName} == \"created_time\")\n            now(),\n            #else\n            #{${column.javaFieldName},jdbcType=${column.mybatisJdbcType}},\n            #end\n            #end\n        </trim>\n    </insert>\n    <delete id=\"delete\" parameterType=\"java.lang.String\">\n        delete from ${table.tableName}\n        where\n        ${context.pkName} = #{${context.javaPkName},jdbcType=${context.mybatisPkType}}\n    </delete>\n</mapper>','admin'),(40,'cmsp_entity','orm/entity',NULL,'${context.javaBeanName}Entity.java','        package ${context.packageName}.orm.entity;\n        import java.io.Serializable;\n        import java.sql.Timestamp;\n        import java.util.*;\n/**\n ${table.comment}\n */\npublic class ${context.javaBeanName}Entity implements Serializable{\nprivate static final long serialVersionUID = 1L;\n        #foreach($column in $columns)\n/**\n * ${column.comment}\n */\nprivate ${column.javaTypeBox} ${column.javaFieldName};\n        #end\n        }','admin'),(41,'cmsp_dao','orm/mapper',NULL,'${context.javaBeanName}Mapper.java','package ${context.packageName}.orm.mapper;\n\nimport ${context.packageName}.orm.entity.${context.javaBeanName}Entity;\nimport ${context.packageName}.orm.param.${context.javaBeanName}QueryBean;\nimport com.longshare.cmsp.orm.support.model.Page;\n\nimport java.util.List;\n\npublic interface ${context.javaBeanName}Mapper {\n    int delete(String id);\n\n    int insert(${context.javaBeanName}Entity entity);\n\n    ${context.javaBeanName}Entity queryById(String id);\n\n    List<${context.javaBeanName}Entity> query(${context.javaBeanName}QueryBean queryBean);\n\n    int update(${context.javaBeanName}Entity entity);\n\n    Page<${context.javaBeanName}Entity> queryByPage(Page<${context.javaBeanName}Entity> page, ${context.javaBeanName}QueryBean queryBean);\n}\n','admin'),(42,'cmsp_queryBean','orm/param',NULL,'${context.javaBeanName}QueryBean.java','package ${context.packageName}.orm.param;\nimport java.io.Serializable;\nimport java.sql.*;\nimport java.util.*;\nimport java.util.Date;\n/**\n ${table.comment}\n */\npublic class ${context.javaBeanName}QueryBean implements Serializable{\nprivate static final long serialVersionUID = 1L;\n        #foreach($column in $columns)\n\n        #if(${column.columnName} == \"modified_time\"||${column.columnName} == \"created_time\")\n/**\n * ${column.comment}(Start)\n */\nprivate ${column.javaTypeBox} ${column.javaFieldName}Start;\n\n/**\n * ${column.comment}(End)\n */\nprivate ${column.javaTypeBox} ${column.javaFieldName}End;\n\n        #else\n/**\n * ${column.comment}\n */\nprivate ${column.javaTypeBox} ${column.javaFieldName};\n        #end\n        #end\n/**\n * orderBy\n */\nprivate String orderByStr;\n\nprivate String queryParam;\n        }','admin'),(43,'cmsp_vo','model',NULL,'${context.javaBeanName}VO.java','package ${context.packageName}.model;\n        import java.io.Serializable;\n        import java.util.*;\n/**\n * Create By WongCU\n */\npublic class ${context.javaBeanName}VO implements Serializable{\nprivate static final long serialVersionUID=1L;\n        #foreach($column in $columns)\n        #set($min = ${column.comment.length()} - 3)\n        #set($max = ${column.comment.length()} - 1)\n        #if(${column.columnName}==\"modified_time\"||${column.columnName}==\"created_time\")\n/**\n * ${column.comment}(Start)\n */\nprivate ${column.javaTypeBox} ${column.javaFieldName}Start;\n/**\n * ${column.comment}(End)\n */\nprivate ${column.javaTypeBox} ${column.javaFieldName}End;\n        #elseif(${column.comment}&&${column.comment.length()}>=4&&${column.comment.substring($min,$max)}==\"字典\")\n/**\n * ${column.comment}\n */\nprivate ${column.javaTypeBox} ${column.javaFieldName};\n\n/**\n * ${column.comment}(文本)\n */\nprivate ${column.javaTypeBox} ${column.javaFieldName}_text;\n        #else\n/**\n * ${column.comment}\n */\nprivate ${column.javaTypeBox} ${column.javaFieldName};\n        #end\n        #end\n/**\n * orderBy\n */\nprivate String orderByStr;\n\nprivate String queryParam;\n        }','admin'),(47,'cmsp_api_controller','controller',NULL,'${context.javaBeanName}APIController.java','package ${context.packageName}.controller;\n\n        import ${context.packageName}.ErrorCode;\n        import ${context.packageName}.model.${context.javaBeanName}QueryVO;\n        import ${context.packageName}.model.${context.javaBeanName}VO;\n        import ${context.packageName}.service.${context.javaBeanName}Service;\n        import com.longshare.cmsp.orm.support.model.Page;\n        import com.longshare.cmsp.support.micro.service.api.result.GenericPageVO;\n        import com.longshare.cmsp.support.micro.service.api.result.Result;\n        import org.slf4j.Logger;\n        import org.slf4j.LoggerFactory;\n        import org.springframework.beans.factory.annotation.Autowired;\n        import org.springframework.web.bind.annotation.*;\n\n/**\n * Created by WongCU.\n * 错误代码\n * ${context.javaBeanName.toUpperCase()}_ID_CANNOT_BE_NULL(1,\"ID不能为空\"),\n * ${context.javaBeanName.toUpperCase()}_CANNOT_BE_NULL(2,\"${table.comment}不能为空\"),\n * QUERY_${context.javaBeanName.toUpperCase()}_BY_PAGE_ERROR(3,\"分页查询${table.comment}发生异常\"),\n * QUERY_${context.javaBeanName.toUpperCase()}_DETAIL_ERROR(4,\"查询${table.comment}详情发生异常\"),\n * INSERT_${context.javaBeanName.toUpperCase()}_ERROR(5,\"新增${table.comment}发生异常\"),\n * UPDATE_${context.javaBeanName.toUpperCase()}_ERROR(6,\"更新${table.comment}发生异常\"),\n * DELETE_${context.javaBeanName.toUpperCase()}_ERROR(7,\"删除${table.comment}发生异常\"),\n *\n */\n@RestController\n@RequestMapping(\"/api/${context.javaBeanNameLF.toLowerCase()}s\")\npublic class ${context.javaBeanName}APIController {\n        Logger logger = LoggerFactory.getLogger(${context.javaBeanName}APIController.class);\n\n@Autowired\n    ${context.javaBeanName}Service ${context.javaBeanNameLF}Service;\n\n@PostMapping(\"/list\")\npublic Result<GenericPageVO<${context.javaBeanName}VO>> list(@RequestParam(value = \"page\", required = false, defaultValue = \"1\") int pageNo,\n@RequestParam(value = \"rows\", required = false, defaultValue = \"10\") int pageSize,\n@RequestParam(value = \"sort\", required = false) String sort,\n@RequestBody ${context.javaBeanName}QueryVO queryVO) {\n        logger.debug(\"根据查询条件分页查询${table.comment}信息,queryVO:{}\",queryVO);\n        try {\n        return Result.genSuccessResult(${context.javaBeanNameLF}Service.find(new Page(pageNo,pageSize),sort,queryVO));\n        }catch (Exception e){\n        logger.error(\"根据查询条件分页查询${table.comment}信息发生异常\",e);\n        System.out.println(e);\n        return Result.genErrorResult(ErrorCode.appCode,ErrorCode.QUERY_${context.javaBeanName.toUpperCase()}_BY_PAGE_ERROR.code,ErrorCode.QUERY_${context.javaBeanName.toUpperCase()}_BY_PAGE_ERROR.message,e.getMessage());\n        }\n        }\n\n@GetMapping(\"${context.javaPkName}\")\npublic Result<${context.javaBeanName}VO> detail(@PathVariable(\"${context.javaPkName}\") String ${context.javaPkName}){\n        logger.debug(\"根据ID查询${table.comment}详情信息,${context.javaPkName}:{}\",${context.javaPkName});\n        if(${context.javaPkName}==null){\n        return Result.genFailResult(ErrorCode.appCode,ErrorCode.${context.javaBeanName.toUpperCase()}_ID_CANNOT_BE_NULL.code,ErrorCode.${context.javaBeanName.toUpperCase()}_ID_CANNOT_BE_NULL.message,null);\n        }\n        try {\n        return Result.genSuccessResult(${context.javaBeanNameLF}Service.queryById(${context.javaPkName}));\n        }catch (Exception e){\n        logger.error(\"根据客户ID查询${table.comment}信息发生异常\",e);\n        return Result.genErrorResult(ErrorCode.appCode,ErrorCode.QUERY_${context.javaBeanName.toUpperCase()}_DETAIL_ERROR.code,ErrorCode.QUERY_${context.javaBeanName.toUpperCase()}_DETAIL_ERROR.message,null);\n        }\n        }\n\n@PostMapping\npublic Result<String> create(@RequestBody ${context.javaBeanName}VO ${context.javaBeanNameLF}VO){\n        logger.debug(\"新增${table.comment},${context.javaBeanNameLF}VO:{}\",${context.javaBeanNameLF}VO);\n        if(${context.javaBeanNameLF}VO==null){\n        return Result.genFailResult(ErrorCode.appCode,ErrorCode.${context.javaBeanName.toUpperCase()}_CANNOT_BE_NULL.code,ErrorCode.${context.javaBeanName.toUpperCase()}_CANNOT_BE_NULL.message,null);\n        }\n        try {\n        return Result.genSuccessResult(${context.javaBeanNameLF}Service.insert(${context.javaBeanNameLF}VO));\n        }catch (Exception e){\n        logger.error(\"新增${table.comment}异常\",e);\n        return Result.genErrorResult(ErrorCode.appCode,ErrorCode.INSERT_${context.javaBeanName.toUpperCase()}_ERROR.code,ErrorCode.INSERT_${context.javaBeanName.toUpperCase()}_ERROR.message,e.getMessage());\n        }\n        }\n\n@PutMapping\npublic Result<Boolean> update(@RequestBody ${context.javaBeanName}VO ${context.javaBeanNameLF}VO){\n        logger.debug(\"更新${table.comment},${context.javaBeanNameLF}VO:{}\",${context.javaBeanNameLF}VO);\n        if(${context.javaBeanNameLF}VO==null){\n        return Result.genFailResult(ErrorCode.appCode,ErrorCode.${context.javaBeanName.toUpperCase()}_CANNOT_BE_NULL.code,ErrorCode.${context.javaBeanName.toUpperCase()}_CANNOT_BE_NULL.message,null);\n        }\n        try {\n        return Result.genSuccessResult(${context.javaBeanNameLF}Service.update(${context.javaBeanNameLF}VO));\n        }catch (Exception e){\n        logger.error(\"更新${table.comment}异常\",e);\n        return Result.genErrorResult(ErrorCode.appCode,ErrorCode.UPDATE_${context.javaBeanName.toUpperCase()}_ERROR.code,ErrorCode.UPDATE_${context.javaBeanName.toUpperCase()}_ERROR.message,e.getMessage());\n        }\n        }\n\n@DeleteMapping(\"/{id}\")\npublic Result<Boolean> delete(@PathVariable(\"id\") String id){\n        logger.debug(\"根据ID删除${table.comment},id:{}\",id);\n        if(id==null){\n        return Result.genFailResult(ErrorCode.appCode,ErrorCode.${context.javaBeanName.toUpperCase()}_ID_CANNOT_BE_NULL.code,ErrorCode.${context.javaBeanName.toUpperCase()}_ID_CANNOT_BE_NULL.message,null);\n        }\n        try {\n        return Result.genSuccessResult(${context.javaBeanNameLF}Service.delete(id));\n        }catch (Exception e){\n        logger.error(\"根据ID删除${table.comment}发生异常\",e);\n        return Result.genErrorResult(ErrorCode.appCode,ErrorCode.DELETE_${context.javaBeanName.toUpperCase()}_ERROR.code,ErrorCode.DELETE_${context.javaBeanName.toUpperCase()}_ERROR.message,e.getMessage());\n        }\n        }\n        }\n','admin'),(48,'cmsp_service','service',NULL,'${context.javaBeanName}Service.java','package ${context.packageName}.service;\n\n        import ${context.packageName}.model.${context.javaBeanName}VO;\n        import ${context.packageName}.orm.entity.${context.javaBeanName}Entity;\n        import ${context.packageName}.orm.mapper.${context.javaBeanName}Mapper;\n        import ${context.packageName}.orm.param.${context.javaBeanName}QueryBean;\n        import com.longshare.cmsp.orm.support.model.Page;\n        import com.longshare.cmsp.support.common.component.util.BeanHelper;\n        import com.longshare.cmsp.support.micro.service.api.result.GenericPageVO;\n        import org.slf4j.Logger;\n        import org.slf4j.LoggerFactory;\n        import org.springframework.beans.factory.annotation.Autowired;\n        import org.springframework.stereotype.Service;\n\n        import java.util.ArrayList;\n        import java.util.List;\n        import java.util.UUID;\n\n/**\n * Created by WongCU.\n */\n@Service\npublic class ${context.javaBeanName}Service {\n\n        Logger logger = LoggerFactory.getLogger(${context.javaBeanName}Service.class);\n\n@Autowired\n    ${context.javaBeanName}Mapper ${context.javaBeanNameLF}Mapper;\n\n/**\n * 分页查询${table.comment}\n * @param page\n * @param sort\n * @return\n */\npublic GenericPageVO<${context.javaBeanName}VO> find(Page page, String sort, ${context.javaBeanName}QueryVO queryParam) {\n\n        ${context.javaBeanName}QueryBean queryBean = BeanHelper.convertTo(queryParam,${context.javaBeanName}QueryBean.class);\n        queryBean.setOrderByStr(sort);\n        Page<${context.javaBeanName}Entity> entityPage = ${context.javaBeanNameLF}Mapper.queryByPage(page, queryBean);\n        List<${context.javaBeanName}VO> ${context.javaBeanNameLF}VOS = new ArrayList<>();\n        for (${context.javaBeanName}Entity ${context.javaBeanNameLF}Entity : entityPage.getResults()) {\n        ${context.javaBeanName}VO ${context.javaBeanNameLF}VO = BeanHelper.convertTo(${context.javaBeanNameLF}Entity, ${context.javaBeanName}VO.class);\n        ${context.javaBeanNameLF}VOS.add(${context.javaBeanNameLF}VO);\n        }\n        return new GenericPageVO(entityPage.getTotalCount(), entityPage.getTotalPages(), ${context.javaBeanNameLF}VOS);\n        }\n\n/**\n * 根据ID查询${table.comment}\n * @param id\n * @return\n */\npublic ${context.javaBeanName}VO queryById(String id){\n        ${context.javaBeanName}Entity entity = ${context.javaBeanNameLF}Mapper.queryById(id);\n        return BeanHelper.convertTo(entity,${context.javaBeanName}VO.class);\n        }\n\n/**\n * 新增${table.comment}\n * @param ${context.javaBeanNameLF}VO\n */\npublic String insert(${context.javaBeanName}VO ${context.javaBeanNameLF}VO){\n        ${context.javaBeanName}Entity entity = BeanHelper.convertTo(${context.javaBeanNameLF}VO,${context.javaBeanName}Entity.class);\n        entity.set${context.javaPkName}(UUID.randomUUID().toString());\n        ${context.javaBeanNameLF}Mapper.insert(entity);\n        return entity.get${context.javaPkName}();\n        }\n\n/**\n * 更新${table.comment}\n * @param ${context.javaBeanNameLF}VO\n * @return\n */\npublic Boolean update(${context.javaBeanName}VO ${context.javaBeanNameLF}VO){\n        ${context.javaBeanName}Entity entity = BeanHelper.convertTo(${context.javaBeanNameLF}VO,${context.javaBeanName}Entity.class);\n        return ${context.javaBeanNameLF}Mapper.update(entity) == 1 ;\n        }\n        \n/**\n * 删除${table.comment}\n * @param id\n * @return\n */\npublic Boolean delete(String id){\n        return ${context.javaBeanNameLF}Mapper.delete(id)==1;\n        }\n\n}\n','admin'),(49,'cmsp_mybatis','orm/mapper',NULL,'${context.javaBeanName}Mapper.xml','#set($jq=\"$\")\n         <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n         <!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n <mapper namespace=\"${context.packageName}.orm.mapper.${context.javaBeanName}Mapper\">\n     <sql id=\"includeColumns\">\n         <trim suffixOverrides=\",\">\n             #foreach($column in $columns)\n             ${column.columnName} as ${column.javaFieldName},\n             #end\n         </trim>\n \n     </sql>\n     <sql id=\"dynamicWhere\">\n         <where>\n             1 = 1\n             #foreach($column in $columns)\n             #if(${column.columnName} == \"modified_time\"||${column.columnName} == \"created_time\")\n             <if test=\"${column.javaFieldName}Start != null\">\n                 and ${column.columnName} <![CDATA[ >= ]]> #{${column.javaFieldName}Start,jdbcType=${column.mybatisJdbcType}}\n             </if>\n             <if test=\"${column.javaFieldName}End != null\">\n                 and ${column.columnName} <![CDATA[ <= ]]> #{${column.javaFieldName}End,jdbcType=${column.mybatisJdbcType}}\n             </if>\n             #elseif(${column.mybatisJdbcType}==\"TIMESTAMP\"||${column.mybatisJdbcType}==\"DATETIME\")\n             <if test=\"${column.javaFieldName} != null\">\n                 and ${column.columnName} = #{${column.javaFieldName},jdbcType=${column.mybatisJdbcType}},\n             </if>\n             #else\n             <if test=\"${column.javaFieldName} != null and ${column.javaFieldName} != \'\'\">\n                 and ${column.columnName} = #{${column.javaFieldName},jdbcType=${column.mybatisJdbcType}}\n             </if>\n             #end\n             #end\n         </where>\n     </sql>\n \n     <select id=\"queryByPage\" parameterType=\"${context.packageName}.orm.param.${context.javaBeanName}QueryBean\"\n             resultType=\"${context.packageName}.orm.entity.${context.javaBeanName}Entity\">\n         select\n         <include refid=\"includeColumns\"/>\n \n         from ${table.tableName}\n         <include refid=\"dynamicWhere\"/>\n         <if test=\"orderByStr != null and \'\' != orderByStr\">\n             <bind name=\"orderByStr\" value=\"orderByStr.replaceAll(\'\\\\+\',\' ASC\').replaceAll(\'-\',\' DESC\')\"/>\n             order by ${orderByStr}\n         </if>\n     </select>\n \n     <select id=\"query\" parameterType=\"${context.packageName}.orm.param.${context.javaBeanName}QueryBean\"\n             resultType=\"${context.packageName}.orm.entity.${context.javaBeanName}Entity\">\n         select\n         <include refid=\"includeColumns\"/>\n         from ${table.tableName}\n         <include refid=\"dynamicWhere\"/>\n         <if test=\"orderByStr != null and \'\' != orderByStr\">\n             <bind name=\"orderByStr\" value=\"orderByStr.replaceAll(\'\\\\+\',\' ASC\').replaceAll(\'-\',\' DESC\')\"/>\n             order by ${orderByStr}\n         </if>\n     </select>\n \n     <select id=\"queryById\" parameterType=\"java.lang.String\"\n             resultType=\"${context.packageName}.orm.entity.${context.javaBeanName}Entity\">\n         select\n         <include refid=\"includeColumns\"/>\n         from ${table.tableName}\n         where\n         ${context.pkName} = #{${context.javaPkName},jdbcType=${context.mybatisPkType}}\n     </select>\n \n     <update id=\"update\" parameterType=\"${context.packageName}.orm.entity.${context.javaBeanName}Entity\">\n         update ${table.tableName}\n         <trim prefix=\"set\" suffixOverrides=\",\">\n             #foreach($column in $columns)\n             #if(${column.columnName} == \"modified_time\")\n             ${column.columnName} = now(),\n             #elseif(${column.mybatisJdbcType}==\"TIMESTAMP\"||${column.mybatisJdbcType}==\"DATETIME\")\n             <if test=\"${column.javaFieldName} != null\">\n                 ${column.columnName} = #{${column.javaFieldName},jdbcType=${column.mybatisJdbcType}},\n             </if>\n             #else\n             <if test=\"${column.javaFieldName} != null and ${column.javaFieldName} != \'\'\">\n                 ${column.columnName} = #{${column.javaFieldName},jdbcType=${column.mybatisJdbcType}},\n             </if>\n             #end\n             #end\n         </trim>\n         <where>\n             ${context.pkName} = #{${context.javaPkName},jdbcType=${context.mybatisPkType}}\n         </where>\n     </update>\n \n     <insert id=\"insert\" parameterType=\"${context.packageName}.orm.entity.${context.javaBeanName}Entity\">\n         insert into ${table.tableName}\n         <trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\">\n             #foreach($column in $columns)\n             ${column.columnName},\n             #end\n         </trim>\n         <trim prefix=\"values (\" suffix=\")\" suffixOverrides=\",\">\n             #foreach($column in $columns)\n             #if(${column.columnName} == \"modified_time\"||${column.columnName} == \"created_time\")\n             now(),\n             #else\n             #{${column.javaFieldName},jdbcType=${column.mybatisJdbcType}},\n             #end\n             #end\n         </trim>\n     </insert>\n     <delete id=\"delete\" parameterType=\"java.lang.String\">\n         delete from ${table.tableName}\n         where\n         ${context.pkName} = #{${context.javaPkName},jdbcType=${context.mybatisPkType}}\n     </delete>\n </mapper>','wongcu');
/*!40000 ALTER TABLE `template_config` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-07-23 20:20:42
